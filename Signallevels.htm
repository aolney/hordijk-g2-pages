
<!-- saved from url=(0127)https://web.archive.org/web/20240701064124fw_/https://rhordijk.home.xs4all.nl/G2Pages/Signallevels.htm#Signallevels_5319_999210 -->
<html><!--<meta version="1.0">--><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252"><script type="text/javascript" src="./Signallevels_files/bundle-playback.js" charset="utf-8"></script>
<script type="text/javascript" src="./Signallevels_files/wombat.js" charset="utf-8"></script>
<script>window.RufflePlayer=window.RufflePlayer||{};window.RufflePlayer.config={"autoplay":"on","unmuteOverlay":"hidden","showSwfDownload":true};</script>
<script type="text/javascript" src="./Signallevels_files/ruffle.js"></script>
<script type="text/javascript">
    __wm.init("https://web.archive.org/web");
  __wm.wombat("https://rhordijk.home.xs4all.nl/G2Pages/Signallevels.htm","20240701064124","https://web.archive.org/","web","https://web-static.archive.org/_static/",
	      "1719816084");
</script>
<link rel="stylesheet" type="text/css" href="./Signallevels_files/banner-styles.css">
<link rel="stylesheet" type="text/css" href="./Signallevels_files/iconochive.css">
<!-- End Wayback Rewrite JS Include -->
<title>&nbsp;</title>







<!--<base target="_self">--><base href="." target="_self">

<link rel="stylesheet" href="./Signallevels_files/Default.css" type="text/css">

<link rel="stylesheet" href="./Signallevels_files/IntroHistory_4835.css">


<link rel="stylesheet" href="./Signallevels_files/Custom.css" type="text/css">

<meta name="generator" content="RoboHELP by eHelp Corporation - www.ehelp.com - from RoboHelp for FrameMaker">

<link rel="next" href="https://web.archive.org/web/20240701064124fw_/https://rhordijk.home.xs4all.nl/G2Pages/Switches.htm">

<link rel="prev" href="https://web.archive.org/web/20240701064124fw_/https://rhordijk.home.xs4all.nl/G2Pages/SignalTypes.htm">


</head>



<body>







<!-- Generated Text- - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->

<p class="pheading_2" ps="heading 2" style="text-align:left;
		margin-left:1.27cm;
		margin-top:12pt;
		margin-bottom:3pt;
		font-family:Times New Roman;
		font-weight:normal;
		font-style:normal;
		font-size:2pt;
		letter-spacing:0em;
		color:black;
		line-height:2pt;
		text-decoration:none;" origtag="heading 2">&nbsp;</p>

<h2 class="pHeading1" ps="Heading1" origtag="Heading1"><a name="Signallevels_5319_999210"></a>Signal levels</h2>

<h3 class="pHeading2" ps="Heading2" origtag="Heading2"><a name="Signallevels_5319_1000631"></a>Signal levels in the G2 system</h3>

<p class="pBody" ps="Body" origtag="Body">Something that must be understood is how the levels of the signals relate to musical properties. In fact this is probably the only real difficult subject when working witha system like the G2. When this issue is well understood all other subjects suddenly become more clear and the G2 can be patched in a more intuitive way. It is important to get a <font class="c_Override" cs="+Override" style="font-style:italic;">feel for signals</font>, e.g. how deep and how fast a certain modulation signal will modulate another module, e.g. will a vibrato sweep just be very shallow or will it sweep the sound wildly all over the place. This feel will come quite fast, just as the effect is so very audible. But it might still take some weeks or months before this feel becomes a second nature. The time this takes depends a lot on how much time you can or want to spend in experimenting with the G2.</p>

<p class="pBody" ps="Body" origtag="Body">Of course there is system to the signal levels. In fact, much effort was put into making the signal levels and their musical relation as balanced as possible. To explain this system some technical talk is regrettably unavoidable. However, the technical issues involved are not much and they apply to other digital systems as well. In the professional audio world these issues are considered the basic technical understandings one must have to be able to work professionally with digital equipment. So, if you’re not a pro yet, hang on and struggle with great courage through the next few paragraphs. And if you are a pro you are kindly invited to refresh your knowledge a bit.</p>

<h3 class="pHeading2" ps="Heading2" origtag="Heading2"><a name="Signallevels_5319_1000557"></a>Signal levels</h3>

<p class="pBody" ps="Body" origtag="Body">In a traditional analog modular system voltages and currents are used for every signal. But in the G2, as it is a digital system, there are of course no true voltages and currents that go through the virtual cables that are drawn on the computer screen. What actually runs through these virtual cables are digital signals represented by streams of digital numbers. There are two things that define the quality of such digital signals, the amount of digital numbers per second that is fed through the system and the precision of each of these numbers. As mentioned in the previous chapter there are two rates to feed numbers through the system, 24000 numbers a second and 96000 numbers a second. The precision of the numbers is expressed in bits and the numbers used for all signals in the G2 are in fact high-resolution 24bit numbers. To give an idea on how the quality of 24 bits turns out to be in practice, the signal-to-noise ratio is often used as the signal-to-noise ratio can be easily paired with the number of bits in a digital number. Every extra bit in a binary number represents an increase of 6 dB in the average signal-to-noise ratio of the digital system. It might look like the signal-to-noise ratio is a strange way to say something about the quality of a digital signal, but it is not. The idea is that a digital signal is always an approximation of an analog signal. Any deviation from the original analog signal will be perceived as noise. This noise doesn’t sound like the soft noise from analog equipment, but it rather sounds like ‘lofi’ digital noise. The higher the precision of the digital signal, the closer it will approximate the analog signal, and there will be less ‘left over’ noise. E.g., an eight bit number has an 8 times 6dB is 48 dB signal to noise ratio, a sixteen bit number 16 times 6dB is 96 dB and a 24 bit number a 24 times 6dB is 144 dB of signal to noise ratio. 144 dB is well below the noise floor of the human ear, the sound of the heartbeat and the rushing of the blood through the veins are louder. So, 24 bits of precision is generally considered well enough for processing audio. Still, there are some angles to this 144dB as the 24 bits is what is <font class="c_Override" cs="+Override" style="font-style:italic;">totally available</font>; it is in fact the <font class="c_Override" cs="+Override" style="font-style:italic;">whole dynamic range</font> of the system. Meaning that when a signal would exceed this 24 bits the tops of the waveform of the signal are clipped off, as there is simply nothing beyond this 24 bits dynamic range. The important thing to understand about digital signals is that the bit depth is also the absolute boundary beyond which nothing else exists! It is not like with an analog tape that can be softly driven into saturation. This goes for every piece of digital equipment. This principle is even more important when making digital recordings, as when the audio signal has been recorded too loud and there is clipping in the recording, the clipping is final and basically a part of the signal is lost forever. There is no way to later construct what it was that has been clipped away, other than by pure guessing what it might have been. This means that with any piece of digital equipment the internal signal levels never use the full 24 bit resolution, as some headroom is needed to reduce the chances of clipping. In fact the total mix of all signals, waveforms, voices or tracks has to fit within the 24 bits dynamic range. So, the signals are ‘embedded’ in 24 bit numbers, but maybe only 22 of the 24 bits might actually be used. Which would give a headroom of two times the remaining bits times 6dB is 12 dB of headroom, while having a signal to noise ratio of 22 times 6dB is 132dB in the waveform or recorded track. In a digital synthesizer there must be a balance between the number of bits used for the actual recordings or generated waveforms and the available headroom for mixing these recorded tracks or waveforms later on. Take note that all headroom issues that apply to recording and mix tracks on a digital recorder apply equally to mixing audio signals within a digital system like the G2. In the G2 the waveforms are calculated with a headroom of 12dB, meaning that there is 22 bits of precision in each single oscillator waveform.</p>

<h3 class="pHeading2" ps="Heading2" origtag="Heading2"><a name="Signallevels_5319_999214"></a>The G2 numbering system</h3>

<p class="pBody" ps="Body" origtag="Body">To make working with the signals easier a special numbering system has been implemented on the G2, dividing the total dynamic range of 24 bits into units. In the editor screen and on the G2 panel the values are not represented in bits but in convenient units that actually have a musical meaning. Some Nord Modular users fondly named these units ClaviaUnits. Remember that on a traditional analog synthesizer there was the 1V/Oct norm for defining pitches. On the G2 there is a similar norm, defining that <font class="c_Override" cs="+Override" style="font-style:italic;">an increase of one single unit</font> stands for <font class="c_Override" cs="+Override" style="font-style:italic;">an increase in pitch of a half note</font>. So, the G2 has a ‘12 units/Oct’ normalization. A single ‘unit’ is the exact equivalent of 1/12 Volt on a purely analog synth, but more importantly <font class="c_Override" cs="+Override" style="font-style:italic;">a single unit</font> now also <font class="c_Override" cs="+Override" style="font-style:italic;">represents a key on the keyboard</font>. What goes through a cable in the Editor program are streams of numbers with values expressed in ‘units’, just like voltages with a certain Volt value go through the patchcables on analog modulars.</p>

<h3 class="pHeading2" ps="Heading2" origtag="Heading2"><a name="Signallevels_5319_1000569"></a>Waveform levels</h3>

<p class="pBody" ps="Body" origtag="Body">The waveform signal that leaves the output of an oscillator or LFO module swings between +64 and –64 units. This means that this signal can directly sweep another oscillator 64 half notes up and 64 half notes down, so a pitch sweep of almost eleven octaves! This sweep will not be stepped like in an arpeggio, but instead be a continuous smooth sweep. Between +64 and 64 there are 129 unit divisions (64 plus 64 plus one step for a zero value), but the units are in fact fractional numbers with a decimal point. Actually there are another 32768 subdivisions between two consecutive unit values. Meaning that a half note step is subdivided into 32678 additional sub steps. In practice the internal frequency resolution of the G2 is 0.0057 Hz, which is about 4000 intermediate steps between two half notes at the middle of the keyboard. Which for all practical purposes is pretty accurate and will make all pitch glides sound as smooth as they should.</p>

<p class="pBody" ps="Body" origtag="Body">To summarize, one unit represents a half note pitch step. The output signals from oscillators sweep over 128 half note steps between +64 units and –64 units, which can produce a sweep of almost eleven octaves. The units are always fractional numbers that can have something before and something after the decimal point, enabling very smooth and zipper free glides.</p>

<h3 class="pHeading2" ps="Heading2" origtag="Heading2"><a name="Signallevels_5319_999217"></a>Manipulating signal levels</h3>

<p class="pBody" ps="Body" origtag="Body">Now it gets a bit more obscure, as what happens when a control signal changes the signal level or amplitude of an oscillator waveform signal, e.g. when the oscillator signal is processed in an envelope module or by an attenuation knob. First, make note that envelope signals swing between 0 and +64 units. When an envelope generator is in rest, the control signal output on the module produces a value of zero. This is a very convenient value as when multiplying whatever value the oscillator signal happens to have with this zero value, the result will always be zero, as zero times anything is always zero. So, this zero value is able to effectively shut of the sound. When receiving a gate pulse from the keyboard the control output value of the envelope module will rise at the attack value speed until it reaches a maximum value of +64. Then it drops slowly back to zero again. So, the peak value of the envelope signal is +64. When this +64 is multiplied by the waveform’s positive peak value of +64 the result is +4096 and when multiplied by the negative peak value of 64 the result is –4096. However, these values are way beyond the headroom, as the clipping level of the whole system actually lies at +256 and –256 units. So, when a straight arithmetic multiplication would be used to envelope the oscillator signal with an envelope value, most of the audio would be rocketed away into the nevernever lands that lie beyond the limits of the dynamic range of the system, resulting in very severe clipping. To solve this issue <font class="c_Override" cs="+Override" style="font-style:italic;">scaling</font> is used in<font class="c_Override" cs="+Override" style="font-style:italic;"> all operations that can dynamically alter the level of a signal</font>. It is obvious that when the audio signal swings between +64 and –64 and the envelope control signal is at its peak value of +64 the audio signal should be passed with <font class="c_Override" cs="+Override" style="font-style:italic;">unity gain</font> similar to the 0dB mark on a mixing desk channel fader. Unity gain means that the level at the input is exactly equal to the level at the output. Now, note that multiplication of a number by 1 leaves the number unaltered. So the +64 units peak value of the envelope control signal <font class="c_Override" cs="+Override" style="font-style:italic;">should behave</font> like it is an arithmetic number with the value 1. To create that situation the +64 units signal is scaled down to an actual value of 1 before the envelope is applied. This downscaling happens automatically within a module whenever a level is being changed. There is no need to worry about this downscaling, it is simply hidden within the system and always works how it should. The only rule to remember is that <font class="c_Override" cs="+Override" style="font-style:italic;">64 units always translate to unity gain or 0dB</font>. Similarly –64 units translate to the inverse of unity gain, it negates the signal turning it into an inverted or phase reversed copy of the original signal.</p>

<h3 class="pHeading2" ps="Heading2" origtag="Heading2"><a name="Signallevels_5319_999219"></a>The G2 levels and units standard</h3>

<p class="pBody" ps="Body" origtag="Body">Now the rules regarding levels and units can be summarized more completely:</p>

<p class="pBody" ps="Body" origtag="Body">When units relate to <font class="c_Override" cs="+Override" style="font-style:italic;">frequency</font>, a one-unit step equals a half note shift in pitch and each unit also stands for a key on the keyboard.</p>

<p class="pBody" ps="Body" origtag="Body">When units relate to <font class="c_Override" cs="+Override" style="font-style:italic;">amplitude</font>, all signals generated by oscillators swing between +64 and 64 units. A value of +64 units causes any gain controller to have unity gain and the value of 0 units will shut the gain controller completely of. A value of +64 units emulates the arithmetic number one. And a value of +32 units arithmetically equals a half or –6dB.</p>

<p class="pBody" ps="Body" origtag="Body">When <font class="c_Override" cs="+Override" style="font-style:italic;">amplitude relates to frequency</font>, or when the output of any oscillator is used on an unattenuated pitch input of another oscillator or filter, the full oscillator signal will cause a pitch sweep of almost eleven octaves on the other module. An envelope control signal, which goes between 0 and +64 units, will cause a sweep of over five octaves. On filter modules the modulation input with the attenuation knob is twice as sensitive and an envelope signal between 0 and +64 units can cause a filtersweep of almost eleven octaves if the attenuation knob is fully opened.</p>

<p class="pBody" ps="Body" origtag="Body">Remember that internally in the G2 all values expressed in units are in fact fractional values and have a fine subdivision after a ‘decimal point’, which always allows for smooth and zipper free glides and sweeps of both pitch and amplitude.</p>

<p class="pBody" ps="Body" origtag="Body">When for some reason a patch does not seem to follow these rules, there must be a module that is inadvertently messing things up. The bad news is that this module <font class="c_Override" cs="+Override" style="font-style:italic;">must</font> have been placed by <font class="c_Override" cs="+Override" style="font-style:italic;">you</font> (or someone else) for some reason, so the trick is to find this module and see if another setting of knobs might solve things</p>

<h3 class="pHeading2" ps="Heading2" origtag="Heading2"><a name="Signallevels_5319_999227"></a>Attenuation of signals</h3>

<p class="pBody" ps="Body" origtag="Body">But what do the attenuation knobs do to a signal? Basically, when an attenuation knob is closed it will just shut off the input and when it is fully open it will pass the input signal with unity gain. When a knob is slowly opened the scale or attenuation curve of the knob can be linear or exponential. If the knob behaves in a linear fashion the shown knob value is in fact a percentage, if the knob is behaving exponentially the shown knob value can be either just a number between 0 and 100 or a value in dB. This number between 0 and 100 for the exponential scale does not have any particular meaning. On some modules it is possible to set the knob to an exponential, linear or a dB scale. If you want the exponential scale to have a meaning then you must set the knob to a dB scale. The exponential and the dB scale have exactly the same feel, in fact they are the same scale but are only shown with a different unit descriptor. But the linear scale will give a very different feel. Only by turning the knobs and listening to their effect can you develop a feel on how the scales behave musically.</p>

<p class="pBody" ps="Body" origtag="Body">In the editor program the little yellow value popup that appear when the mouse pointer is held over a knob show two values. The top number is the value on the scale and the bottom number is the MIDI value of the knob. A MIDI value can have 128 possible values between 0 and up and including 127. This makes it a bit cumbersome to display values that have a particular musical meaning as all scales must have 128 positions to be compatible with MIDI. It is an inheritance of how things were when MIDI was invented. So, a scale of 100% must be subdivided in 128 steps, making each step equal to a fractional number instead of a whole number, which would probably make life easier for many of us. But to remain compatible with MIDI and all your other MIDI-equipped musical instruments and computer programs this dividing of scales in 128 steps can not be avoided.</p>

<h3 class="pHeading2" ps="Heading2" origtag="Heading2"><a name="Signallevels_5319_999230"></a>Summary</h3>

<p class="pBody" ps="Body" origtag="Body">The G2 set of rules about signals and values is in practice a nicely balanced system. In general it works out so well that there is hardly a situation where unwanted clipping occurs or the signal inadvertently seems to drop to a much lower level. When clipping or a drop in signal level occurs it has always to do with something in the patch. An example is when more than four oscillators are mixed together, as this mix might occasionally exceed the headroom. In such cases the mixed signals need to be attenuated to a level that is roughly the same as the level of a single oscillator before being processed further. This is just common sense and doing so will quickly become a second nature. There are many modules that have a small attenuation control where the signal can be attenuated by –6dB, -12dB and at some places also by –18dB or be boosted by an extra +6dB. These attenuations are applied to the input signals before being mixed, so the internal mixing process will not cause internal clipping in the module. Polyphony might also push the total mix of voices over the headroom limits, as pressing eight keys at the same time is like mixing eight oscillator signals. So, when a patch with lots of voices of polyphony is used it in general needs to be attenuated somewhat. The exact amount can be easily tested by what is named the <font class="c_Override" cs="+Override" style="font-style:italic;">full hand test</font>, when pressing a lot of keys at once by putting your whole hand on the keyboard there just should be no clipping. The best place to set the right amount of attenuation for a polyphonic patch is where the voice signals enter the FX area, the area in a patch where effects like reverb and echo delays are commonly placed. The FX input module has a dB attenuation control setting and this control setting should be set to a value so that the patch passes the full hand test. The output module in the FX section can in general be boosted, e.g. if the input module is attenuated by –6dB you can try to boost the output module by +6dB or even +12dB. Just try different settings until the average volume of the patch is loud enough but still no clipping occurs when six to eight keys are played with maximum force.</p>

<p class="pBody" ps="Body" origtag="Body">&nbsp;</p>


















</body></html>